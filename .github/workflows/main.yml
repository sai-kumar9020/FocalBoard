name: Terraform Infra

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main
 
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform (apply or destroy)'
        required: true

permissions:
  id-token: write
  contents: read
  pull-requests: write

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up AWS credentials with OIDC
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: arn:aws:iam::225748035722:role/OIDC-assign-role
          aws-region: us-east-1

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.50.2

      - name: Run TFLint
        run: tflint --init && tflint -f compact
        continue-on-error: true

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        continue-on-error: true

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./
          framework: terraform
        continue-on-error: true

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Init
        run: terraform init

      - name: Terraform fmt
        run: terraform fmt  -recursive

      - name: Terraform validate
        run: terraform validate

      - name: Terraform plan
        run: terraform plan
  
      - name: Setup Node.js
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install terraform-docs
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/

      - name: Generate Terraform Docs and Commit
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          git config --local user.email "saikumar3034@gmail.com"
          git config --local user.name "sai-kumar9020"

          terraform-docs markdown . > README.md.new
          mv README.md.new README.md

          if [ -f README.md ]; then
            git add README.md
            if git commit -m "docs: Update README.md"; then
              git push
              echo "Successfully committed and pushed README.md changes."
            else
              echo "No README.md changes to commit."
            fi
          else
            echo "README.md was not generated."
          fi

      - name: Update Pull Request
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.SECRET_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation \`${{ steps.validate.outcome }}\`
            #### Terraform Plan \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      
      - name: Read README.md content
        id: readme_content # Assign an ID to reference this step's outputs
        run: |
          # Use 'cat' to read the file and store it in an environment variable, then echo it to GITHUB_OUTPUT
          # We're careful here to handle multiline content by escaping newlines
          # and using a delimiter for the output variable.
          README=$(cat README.md)
          echo "readme<<EOF" >> $GITHUB_OUTPUT
          echo "$README" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Post README.md content to Pull Request
        uses: actions/github-script@v7 # Action to run JavaScript in your workflow
        if: github.event_name == 'pull_request' # Ensure this only runs for PR events
        env:
          # Get the README content from the output of the previous step
          README_BODY: "${{ steps.readme_content.outputs.readme }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }} # GitHub token for authentication
          script: |
            const output = `#### Current README.md Content
            
            <details><summary>Show README.md</summary>
            
            \`\`\`markdown
            ${process.env.README_BODY}
            \`\`\`
            
            </details>
            
            *Posted by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')
        run: terraform apply -auto-approve -input=false
